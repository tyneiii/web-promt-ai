<!DOCTYPE html>
<html lang="vi">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>T·∫°o b√†i vi·∫øt - Giao di·ªán m·ªõi</title>
  <link rel="stylesheet" href="../../public/css/create_post.css">
</head>

<body>
  <button type="button" class="close-btn" title="H·ªßy b√†i vi·∫øt m·ªõi" onclick="confirmCancel()">√ó</button>
  <div class="form-card">
    <div class="user-info">
      <img class="avatar" src="https://i.pravatar.cc/40?img=12" alt="avatar">
      <div class="name">John Doe</div>
      <div class="topic-container">
        <input type="text" class="topic-input" placeholder="Ch·ªçn ch·ªß ƒë·ªÅ...">
        <div class="topic-dropdown"></div>
        <div class="selected-topics"></div>
      </div>
    </div>
    <div class="form-content">
      <div class="collapsible-group">
        <div class="collapsible-header">
          <span>Title</span>
          <span class="indicator">+</span>
        </div>
        <div class="collapsible-content">
          <input type="text" placeholder="Nh·∫≠p ti√™u ƒë·ªÅ cho b√†i vi·∫øt c·ªßa b·∫°n...">
        </div>
      </div>

      <div class="collapsible-group">
        <div class="collapsible-header">
          <span>Description</span>
          <span class="indicator">+</span>
        </div>
        <div class="collapsible-content">
          <textarea placeholder="Th√™m m√¥ t·∫£ ng·∫Øn g·ªçn..."></textarea>
        </div>
      </div>

      <div class="collapsible-group">
        <div class="collapsible-header">
          <span>Content</span>
          <span class="indicator">+</span>
        </div>
        <div class="collapsible-content content-fields">
          <label>1. Instruction</label>
          <input type="text" placeholder="Th√™m h∆∞·ªõng d·∫´n...">
          <label>2. Requirement</label>
          <input type="text" placeholder="Th√™m y√™u c·∫ßu...">
        </div>
      </div>

      <div class="collapsible-group" id="upload-section">
        <div class="collapsible-header">
          <span>+ Upload Image</span>
          <span class="indicator">+</span>
        </div>
        <div class="collapsible-content">
          <button class="upload-btn-main" onclick="document.getElementById('fileInput').click()">Ch·ªçn ·∫£nh t·ª´ thi·∫øt b·ªã</button>
          <input type="file" id="fileInput" accept="image/*" hidden>
          <div id="image-preview"></div>
        </div>
      </div>
    </div>

    <div class="form-footer">
      <div class="icons">
        <div>üì∑</div>
        <div>üòä</div>
        <div>üìç</div>
      </div>
      <div class="right-buttons">
        <button class="cancel-btn" onclick="confirmCancel()">Cancel</button>
        <button class="submit-btn" onclick="handleSubmit()">Upload</button>
      </div>
    </div>
  </div>
</body>
</html>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const collapsibleGroups = document.querySelectorAll('.collapsible-group');

    collapsibleGroups.forEach(group => {
      const header = group.querySelector('.collapsible-header');
      header.addEventListener('click', () => {
        // Ki·ªÉm tra xem nh√≥m n√†y c√≥ ƒëang m·ªü kh√¥ng
        const wasActive = group.classList.contains('active');

        // ƒê√≥ng t·∫•t c·∫£ c√°c nh√≥m kh√°c
        collapsibleGroups.forEach(otherGroup => {
          otherGroup.classList.remove('active');
        });

        // N·∫øu nh√≥m v·ª´a click kh√¥ng ph·∫£i l√† nh√≥m ƒëang m·ªü, th√¨ m·ªü n√≥ ra
        if (!wasActive) {
          group.classList.add('active');
        }
      });
    });

    // X·ª≠ l√Ω xem tr∆∞·ªõc ·∫£nh
    const fileInput = document.getElementById('fileInput');
    const imagePreview = document.getElementById('image-preview');
    const uploadSection = document.getElementById('upload-section');

    fileInput.addEventListener('change', function() {
      const file = this.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
          imagePreview.innerHTML = `<img src="${e.target.result}" alt="Image preview"/>`;
          imagePreview.style.display = 'block';
          // T·ª± ƒë·ªông m·ªü khu v·ª±c upload ƒë·ªÉ ng∆∞·ªùi d√πng th·∫•y ·∫£nh
          if (!uploadSection.classList.contains('active')) {
            uploadSection.querySelector('.collapsible-header').click();
          }
        }
        reader.readAsDataURL(file);
      }
    });
  });

  /* ===== C√°c h√†m c≈© gi·ªØ nguy√™n ===== */
  function confirmCancel() {
    if (confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy b√†i vi·∫øt n√†y kh√¥ng?")) {
      history.back();
    }
  }

  function handleSubmit() {
    if (chosen.length === 0) {
      alert("Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 ch·ªß ƒë·ªÅ tr∆∞·ªõc khi ƒëƒÉng b√†i!");
      return;
    }
    alert("B√†i vi·∫øt c·ªßa b·∫°n ƒë√£ s·∫µn s√†ng ƒë·ªÉ ƒëƒÉng!");
  }

  /* ===== Multi-select ch·ªß ƒë·ªÅ (gi·ªØ nguy√™n) ===== */
  const topicInput = document.querySelector(".topic-input");
  const topicDropdown = document.querySelector(".topic-dropdown");
  const selectedTopics = document.querySelector(".selected-topics");
  const topics = ["C√¥ng ngh·ªá", "AI", "H·ªçc t·∫≠p", "Thi·∫øt k·∫ø", "Ph·∫ßn m·ªÅm", "Kinh doanh", "Marketing", "Th·ªß thu·∫≠t", "ƒê·ªùi s·ªëng", "S√°ng t·∫°o"];
  let chosen = [];
  // (To√†n b·ªô c√°c h√†m renderDropdown, selectTopic, removeTopic, renderSelected v√† event listeners cho topicInput ƒë∆∞·ª£c gi·ªØ nguy√™n nh∆∞ file c≈© c·ªßa b·∫°n)
  function renderDropdown(filter = "") {
    topicDropdown.innerHTML = "";
    topics.filter(t => t.toLowerCase().includes(filter.toLowerCase()) && !chosen.includes(t)).forEach(t => {
      const div = document.createElement("div");
      div.textContent = t;
      div.onclick = () => selectTopic(t);
      topicDropdown.appendChild(div);
    });
  }

  function selectTopic(topic) {
    if (chosen.length >= 3) {
      alert("Ch·ªâ ƒë∆∞·ª£c ch·ªçn t·ªëi ƒëa 3 ch·ªß ƒë·ªÅ!");
      return;
    }
    chosen.push(topic);
    renderSelected();
    renderDropdown(topicInput.value);
  }

  function removeTopic(topic) {
    chosen = chosen.filter(t => t !== topic);
    renderSelected();
    renderDropdown(topicInput.value);
  }

  function renderSelected() {
    selectedTopics.innerHTML = "";
    chosen.forEach(t => {
      const tag = document.createElement("div");
      tag.className = "tag";
      tag.innerHTML = `#${t} <button onclick="removeTopic('${t}')">√ó</button>`;
      selectedTopics.appendChild(tag);
    });
  }
  topicInput.addEventListener("focus", () => {
    renderDropdown();
    topicDropdown.classList.add("show");
  });
  topicInput.addEventListener("blur", () => {
    setTimeout(() => topicDropdown.classList.remove("show"), 150);
  });
  topicInput.addEventListener("input", () => renderDropdown(topicInput.value));
</script>